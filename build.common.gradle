import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

ext.artifactoryUser = project.hasProperty("artifactoryUser") ? project.artifactoryUser : System.env.ARTIFACTORY_USER as String
ext.artifactoryPassword = project.hasProperty("artifactoryPassword") ? project.artifactoryPassword : System.env.ARTIFACTORY_PASSWORD as String
ext.projectGitHubRepoName = "tw-entrypoints"
ext.projectScmUrl = "https://github.com/transferwise/${projectGitHubRepoName}"
ext.projectScmConnection = "scm:git:git://github.com/transferwise/${projectGitHubRepoName}.git"
ext.springBootVersion = "2.5.8"
ext.twContextVersion = "0.11.0"
ext.twBaseUtilsVersion = "1.5.0"
ext.twSpyqlCoreVersion = "1.4.0"

apply plugin: "java-library"
apply plugin: "checkstyle"
apply plugin: "idea"
apply plugin: "com.github.spotbugs"

group = "com.transferwise.common"

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    annotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}!!"))
    compileOnly(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}!!"))
    implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}!!"))
    testAnnotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}!!"))

    annotationProcessor("org.projectlombok:lombok")

    compileOnly("org.projectlombok:lombok")

    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.projectlombok:lombok")
    testImplementation 'ch.qos.logback:logback-classic'
    testImplementation 'org.assertj:assertj-core'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Transferwise Base Utils",
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}

test {
    systemProperty("spring.profiles.include", System.getProperty("spring.profiles.include"))
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"
    excludeFilter = file('../spotbugs-exclude.xml')
    reports {
        xml.required = true
        html.required = true
    }
}

spotbugs {
    spotbugsTest.enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}
