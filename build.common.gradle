import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

ext.artifactoryUser = project.hasProperty("artifactoryUser") ? project.artifactoryUser : System.env.ARTIFACTORY_USER as String
ext.artifactoryPassword = project.hasProperty("artifactoryPassword") ? project.artifactoryPassword : System.env.ARTIFACTORY_PASSWORD as String
ext.projectGitHubRepoName = "tw-entrypoints"
ext.projectScmUrl = "https://github.com/transferwise/${projectGitHubRepoName}"
ext.projectScmConnection = "scm:git:git://github.com/transferwise/${projectGitHubRepoName}.git"

apply plugin: "java-library"
apply plugin: "checkstyle"
apply plugin: "idea"
apply plugin: "com.github.spotbugs"

group = "com.transferwise.common"

repositories {
    mavenCentral()
    mavenLocal()
}

apply from: "${project.rootDir}/build.libraries.gradle"

configurations {
    local {
        canBeResolved(false)
        canBeConsumed(false)
    }
    compileClasspath {
        extendsFrom(local)
    }
    runtimeClasspath {
        extendsFrom(local)
    }
    testCompileClasspath {
        extendsFrom(local)
    }
    testRuntimeClasspath {
        extendsFrom(local)
    }
    annotationProcessor {
        extendsFrom(local)
    }
    testAnnotationProcessor {
        extendsFrom(local)
    }
    shadow {
        extendsFrom(local)
    }
}

dependencies {
    local platform(libraries.springBootDependencies)

    compileOnly libraries.lombok
    annotationProcessor libraries.lombok
    testCompileOnly libraries.lombok
    testAnnotationProcessor libraries.lombok

    compileOnly libraries.spotbugsAnnotations
}

java {
    if (springBootVersion.startsWith("3.")) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    } else {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Transferwise Entrypoints",
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'

    options.fork = true
    options.forkOptions.jvmArgs << '-Xmx256m'

    javaCompiler = javaToolchains.compilerFor {
        if (springBootVersion.startsWith("3.")) {
            languageVersion = JavaLanguageVersion.of(17)
        } else {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }
}

compileTestJava {
    options.fork = true
    options.forkOptions.jvmArgs << '-Xmx256m'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    systemProperty("spring.profiles.include", System.getProperty("spring.profiles.include"))
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    excludeFilter = file('../spotbugs-exclude.xml')

    reports {
        xml.required = true
        html.required = true
    }
}

spotbugs {
    spotbugsTest.enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}
