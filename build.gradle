import com.github.spotbugs.SpotBugsTask

plugins {
    id "idea"
    id "com.github.spotbugs" version "3.0.0"
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'groovy'
    id 'checkstyle'
    // Can be used to test with different dependencies sets, for example with or without tw tasks.
    // id 'org.unbroken-dome.test-sets' version '2.2.1'
}

group = 'com.transferwise.common'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext.projectName = 'Transferwise EntryPoints'
ext.projectDescription = 'Transferwise EntryPoints - Allows to track all applications entry points - REST calls, Kafka messages, jobs, threads.'
ext.projectGitHubRepoName = 'tw-entrypoints'
ext.projectArtifactName = 'tw-entrypoints'

jar {
    manifest {
        attributes(
            "Implementation-Title": "$projectName",
            "Implementation-Version": version
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
}

repositories {
    mavenCentral()
    maven {
        url 'https://arti.tw.ee/artifactory/libs-release'
    }
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:2.1.11.RELEASE"
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    compileOnly 'org.projectlombok:lombok'
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    compileOnly('org.springframework.boot:spring-boot-autoconfigure')
    compileOnly('org.springframework.boot:spring-boot-starter-logging')
    compileOnly('org.springframework.boot:spring-boot-starter-web')
    compileOnly('com.transferwise.tasks:tw-tasks-executor:1.1.0')

    implementation 'com.google.code.findbugs:annotations:3.0.1'
    implementation 'io.micrometer:micrometer-core'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.transferwise.common:tw-base-utils:1.2.7-SNAPSHOT'
    implementation 'com.transferwise.common:tw-spyql-core:1.1.0'
    implementation 'com.github.jsqlparser:jsqlparser:3.1'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.8.0'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework:spring-jdbc'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
    testImplementation 'org.testcontainers:mariadb:1.12.4'
    testImplementation 'com.zaxxer:HikariCP'
    testImplementation 'org.mariadb.jdbc:mariadb-java-client'
    testImplementation 'io.micrometer:micrometer-registry-prometheus'
    testImplementation 'org.flywaydb:flyway-core'
}

ext.artifactoryUser = project.hasProperty("artifactoryUser") ? project.artifactoryUser : System.env.ARTIFACTORY_USER as String
ext.artifactoryPassword = project.hasProperty("artifactoryPassword") ? project.artifactoryPassword : System.env.ARTIFACTORY_PASSWORD as String

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = projectArtifactName
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = projectName
                description = projectDescription
                url = "https://github.com/transferwise/${projectGitHubRepoName}"
                packaging = "jar"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0, Copyright 2019 TransferWise Ltd'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'onukristo'
                        name = 'Kristo KuuskÃ¼ll'
                        email = "kristo.kuuskull@transferwise.com"
                        organization = "Transferwise Ltd"
                        organizationUrl = "https://github.com/transferwise"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/transferwise/${projectGitHubRepoName}.git"
                    developerConnection = "scm:git:ssh://github.com:transferwise/${projectGitHubRepoName}.git"
                    url = "https://github.com/transferwise/${projectGitHubRepoName}"
                }
            }
        }
    }

    signing {
        //sign publishing.publications.mavenJava
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    repositories {
        maven {
            url "https://arti.tw.ee/artifactory/libs-${project.version.endsWith('-SNAPSHOT') ? 'snapshot' : 'release'}-local"
            credentials {
                username = artifactoryUser
                password = artifactoryPassword
            }
        }
        /*
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }*/
    }
}

test {
    systemProperty("spring.profiles.include", System.getProperty("spring.profiles.include"))

    testLogging {
        events "passed", "skipped", "failed", "standardError"
        showStackTraces = true
        exceptionFormat = 'full'
    }
}

spotbugs {
    sourceSets = [sourceSets.main]
    effort = "max"
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

checkstyle {
    sourceSets = [sourceSets.main]
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
        excludeDirs += file('logs')
        excludeDirs += file('gradle')
        excludeDirs += file('build')
        excludeDirs += file('target')
        excludeDirs += file('.idea')
        excludeDirs += file('.gradle')
    }
}

idea.project {
    vcs = 'Git'
    languageLevel = '8'
}

task addTag(type: Exec) {
    commandLine 'git', 'tag', "$project.name-$project.version", '-m', "$project.name-$project.version"
}
task pushTag(type: Exec) {
    commandLine 'git', 'push', 'origin', "$project.name-$project.version"
}
pushTag.dependsOn addTag
