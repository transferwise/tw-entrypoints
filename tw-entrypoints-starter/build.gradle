ext.projectName = "Transferwise EntryPoints Starter"
ext.projectDescription = "Transferwise EntryPoints Starter - Spring Boot Starter for tw-entrypoints"
ext.projectArtifactName = "tw-entrypoints-starter"

apply from: "${project.rootDir}/build.common.gradle"
apply from: "${project.rootDir}/build.publishing.gradle"

dependencies {
    annotationProcessor libraries.springBootConfigurationProcessor
    compileOnly libraries.springBootConfigurationProcessor
    compileOnly libraries.flywayCore

    implementation(project(":tw-entrypoints"))

    implementation libraries.commonsLang3
    implementation libraries.hikariCp
    implementation libraries.micrometerCore
    implementation libraries.springBootStarter
    implementation libraries.twBaseUtils
    implementation libraries.twContextStarter
    implementation libraries.twSpyqlStarter

    runtimeOnly libraries.twGracefulShutdown

    testImplementation libraries.caffeine
    testImplementation libraries.testContainersMariaDb
    testImplementation libraries.slf4jApi
    testImplementation libraries.springBootStarterJdbc
    testImplementation libraries.springBootStarterTest
    testImplementation libraries.twGracefulShutdownInterfaces

    testRuntimeOnly libraries.flywayCore
    if (springBootVersion.startsWith("2.7") || springBootVersion.startsWith("3.")) {
        testRuntimeOnly libraries.flywayMysql
    }
    testRuntimeOnly libraries.mariadbJavaClient
    testRuntimeOnly libraries.micrometerRegistryPrometheus
    testRuntimeOnly libraries.springBootStarterActuator
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            afterEvaluate {
                artifactId = projectArtifactName
            }

            /*
             This ensures that libraries will have explicit dependency versions in their Maven POM and Gradle module files, so that there would be less
             ambiguity and less chances of dependency conflicts.
            */
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionOf('runtimeClasspath')
                }
            }

            pom {
                name = projectName
                description = projectDescription
                url = projectScmUrl
                packaging = "jar"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0, Copyright 2021 TransferWise Ltd'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'onukristo'
                        name = 'Kristo Kuusk√ºll'
                        email = "kristo.kuuskull@transferwise.com"
                        organization = "Transferwise Ltd"
                        organizationUrl = "https://github.com/transferwise"
                    }
                }
                scm {
                    connection = projectScmConnection
                    developerConnection = projectScmConnection
                    url = projectScmUrl
                }
                withXml {
                    if (!asNode().dependencyManagement.isEmpty()) {
                        throw new IllegalStateException("There should not be any `dependencyManagement` block in POM.")
                    }
                }
            }
        }
    }
}

publishing {
    if (System.getenv("OSS_SIGNING_KEY")) {
        signing {
            useInMemoryPgpKeys(System.getenv("OSS_SIGNING_KEY"), System.getenv("OSS_SIGNING_PASSWORD"))
            sign publishing.publications.mavenJava
        }
    }
}